package org.adridadou.ethereum.ethereumj.config;

import java.util.Set;

/**
 * Created by davidroon on 18.09.16.
 * This code is released under Apache 2 license
 * <p>
 * peer {
 * # The protocols supported by peer
 * # can be: [eth, shh, bzz]
 * capabilities = [eth]
 * <p>
 * # Port on which ethereumj will listen
 * # for incoming connections
 * listen.port = 30303
 * <p>
 * # connection timeout for trying to
 * # connect to a peer [seconds]
 * connection.timeout = 2
 * <p>
 * # how much time [seconds]
 * # we will wait for a message
 * # to arrive before closing the channel
 * channel.read.timeout = 90
 * <p>
 * # Private key of the peer
 * # The key is generated by default on the first run and stored in the database folder
 * # If you have your own peer ID, specify its private key here
 * # derived nodeId = dead745c1dbcde518b48e52aca1e8d5ba666005a2c8804e39826c6080fb11c1e8abe41d1e41896e871f204f790a90fa9781744cccecf492212192a7c56e7673b
 * # privateKey = f67c4032a7ff79bbfa7a780331b235c4eb681d51a0704cb1562064fb6c4bced4
 * <p>
 * # Network id
 * networkId = 1
 * <p>
 * p2p {
 * # the default version outbound connections are made with
 * # inbound connections are made with the version declared by the remote peer (if supported)
 * # version = 4
 * <p>
 * # max frame size in bytes when framing is enabled
 * framing.maxSize = 32768
 * <p>
 * # forces peer to send Handshake message in format defined by EIP-8,
 * # see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md
 * eip8 = true
 * }
 * <p>
 * # max number of active peers our node will maintain
 * # extra peers trying to connect us will be dropped with TOO_MANY_PEERS message
 * # the incoming connection from the peer matching 'peer.trusted' entry is always accepted
 * maxActivePeers = 30
 * }
 */
public class PeerConfig {
    private final boolean eip8;
    private final int framingMaxSize;
    private final int p2pVersion;
    private final int networkId;
    private final String privateKey;
    private final int channelReadTimeout;
    private final int connectionTimeout;
    private final int port;
    private final Set<EthereumProtocol> capabilities;

    public PeerConfig(boolean eip8, int framingMaxSize, int p2pVersion, int networkId, String privateKey, int channelReadTimeout, int connectionTimeout, int port, Set<EthereumProtocol> capabilities) {
        this.eip8 = eip8;
        this.framingMaxSize = framingMaxSize;
        this.p2pVersion = p2pVersion;
        this.networkId = networkId;
        this.privateKey = privateKey;
        this.channelReadTimeout = channelReadTimeout;
        this.connectionTimeout = connectionTimeout;
        this.port = port;
        this.capabilities = capabilities;
    }
}
